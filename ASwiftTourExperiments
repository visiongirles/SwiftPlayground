import UIKit

// Written at iOS: 11.5.2 macOS Big Sur XCode: Version 12.5.1 (12E507)
// by Kate Sychenko, https://github.com/visiongirles

// Tasks from https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html

// Task: Create a constant with an explicit type of Float and a value of 4.

var float: Float = 4.0


// Task: Try removing the conversion to String from the last line. What error do you get?


let label = "The width is "
let width = 94
let widthLabel = label + String(width)

// Answer: Binary operator '+' cannot be applied to operands of type 'String' and 'Int' meaning that two variants have different Type and that's why we need to wrap variant \(width) with String. Put back the wrapping to avoid the compiler mistake

// Task: Use \() to include a floating-point calculation in a string and to include someone’s name in a greeting.

let kate = "Kate Sychenko"
let greetingKate = "Aloha, dear \(kate)"
print(greetingKate)


// Task: Change optionalName to nil. What greeting do you get? Add an else clause that sets a different greeting if optionalName is nil.



var optionalName: String? = nil
var greeting = "Hello!"
if let name = optionalName {
    greeting = "Hello, \(name)"
} else {
    greeting = "Oh, hello, stranger-danger!"
}


/* Answer: Part 1: changing "var optionalName" to nil won't execute line 34 because condition "if let name = optionalName" doesn't meet.
 As "optionalName" is nil, it will return false to "if let name".
 Simply, "if let name" will be executed only if "optionalName" has some value (has some value = true)
 Without "else" statement, value of greeting stays "Hello!"
 
 Part 2: wiriting else statement for situation when "optionlName" has no value = nil.
 With "else" statement else part will be executed.
 value of greeting will be "Oh, hello, stranger-danger!"
 */

// Task: Try removing the default case. What error do you get?

let vegetable = "red pepper"
switch vegetable {
case "celery":
    print("Add some raisins and make ants on a log.")
case "cucumber", "watercress":
    print("That would make a good tea sandwich.")
case let x where x.hasSuffix("pepper"):
    print("Is it a spicy \(x)?")
    
default:
    print("Put default back.")
}
// Answer: Switch must be exhaustive. Put back default to avoid the compiler's error

// Task: Replace the _ with a variable name, and keep track of which kind of number was the largest.

let interestingNumbers = [
    "Prime": [2, 3, 5, 7, 11, 13],
    "Fibonacci": [1, 1, 2, 3, 5, 8],
    "Square": [1, 4, 9, 16, 25],
]
var largest = 0
var typeOfLargest = ""
for (type, numbers) in interestingNumbers {
    for number in numbers {
        if number > largest {
            largest = number
            typeOfLargest = type
        }
    }
}
print(largest)
print(typeOfLargest)
// Prints "25", "Square"


// task: Remove the day parameter. Add a parameter to include today’s lunch special in the greeting.

func greet(person: String, lunchSpecial: String) -> String {
    return "Hello \(person), today is \(lunchSpecial)."
}
greet(person: "Kate", lunchSpecial: "Tacos")

// Task: Rewrite the closure to return zero for all odd numbers.

func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {
    for item in list {
        if condition(item) {
            return true
        }
    }
    return false
    
}
func lessThanTen(number: Int) -> Bool {
    return number < 10
}

var numbers = [20, 19, 7, 12]

hasAnyMatches(list: numbers, condition: lessThanTen)


// Soluation 1:
var zeroForOdds = numbers.map({ (number: Int) -> Int in
    let isOdd = number % 2 == 0
    let result = (isOdd ? 0 : number)
    return result
})

print(zeroForOdds)

// Soluation 2:
var zeroForOdds2 = numbers.map({ number in number % 2 == 0 ? 0 : number})


// Task: Add a constant property with let, and add another method that takes an argument.

class NamedShape {
    var numberOfSides = 0
    // var name will be introduced later and needed for further excersices
    var name: String
    // created a consant property with let:
    let angle = 90
    
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides." }
    
    // created amother method that takes an argument
    func takeAnArgument(argument: Int) -> Int {
        return argument * 2
    }
    // initializer will be introduced later and needed for further excersices
    init(name: String) {
        self.name = name
    }
}

var shape = NamedShape(name: "test")
shape.numberOfSides = 7
var simpleDescription = shape.simpleDescription()

class Square: NamedShape {
    var sideLength: Double
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 4
    }
    
    func area() -> Double {
        return sideLength * sideLength
    }
    
    override func simpleDescription() -> String {
        return "A square with side of length \(sideLength)"
    }
    
}

let test = Square(sideLength: 5.2, name: "my test square")
test.area()
test.simpleDescription()


// Make another subclass of NamedShape called Circle that takes a radius and a name as arguments to its initializer. Implement an area() and a simpleDescription() method on the Circle class.


class Circle: NamedShape {
    var radius: Double
    
    init(name: String, radius: Double) {
        self.radius = radius
        super.init(name: name)
        numberOfSides = 0
        
    }
    
    func area()-> Double {
        return radius * radius * Double.pi
    }
    
    override func simpleDescription() -> String {
        return "Circle's radius is \(radius)"
    }
}

var circle = Circle(name: "my test circle", radius: 4)
circle.simpleDescription()
circle.area()

// No Task, just some practice:
class EquilateralTriangle: NamedShape {
    var sideLength: Double = 0 {
        willSet {
            TriangleAndSquare(size: newValue, name: name)
            
        }
        
    }
    
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 3
    }
    
    var perimeter: Double {
        get {
            return 3 * sideLength
        } set {
            sideLength = newValue / 3
        }
    }
    
    override func simpleDescription() -> String {
        return "An equilateral triangle with sides of length \(sideLength)."
    }
}

var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triagnle")
// get - you provide some value and than some other new value is being callculated & assigned to this var:
print(triangle.perimeter)

// set - this action perfoms when you appoint new value to your var, but this action may be performed towards some other vr, not the var which have this action in it:
triangle.perimeter = 9.9
print(triangle.sideLength)

class TriangleAndSquare {
    var triangle: EquilateralTriangle {
        willSet {
            square.sideLength = newValue.sideLength
        }
    }
    
    var square: Square {
        willSet {
            triangle.sideLength = newValue.sideLength
        }
    }
    init(size: Double, name: String) {
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
        
    }
}
var triagnleAndSquare = TriangleAndSquare(size: 10, name: "my other test")
print(triagnleAndSquare.square.sideLength)
print(triagnleAndSquare.triangle.sideLength)
//var tri = EquilateralTriangle(sideLength: 30, name: "more")
triagnleAndSquare.triangle.sideLength = 30
print(triagnleAndSquare.triangle.sideLength)
print(triagnleAndSquare.square.sideLength)


// Task: Write a function that compares two Rank values by comparing their raw values.

enum Rank: Int, CaseIterable {
    case ace = 1
    case two, three, four, five, six, seven, eight, nine, ten
    case jack, queen, king

    func simpleDescription() -> String {
        switch self {
        case .ace:
            return "ace"
        case .jack:
            return "jack"
        case .queen:
            return "queen"
        case .king:
            return "king"
        default:
            return String(self.rawValue)
        }
    }


    func compare(_ a: Rank) -> results {
        if self.rawValue > a.rawValue {
            return results.greater
        } else if self.rawValue < a.rawValue {
            return results.lesser
        } else {
            return results.equal
        }


    }
    enum results: Int {
        case greater = 1
        case lesser = -1
        case equal = 0
    }
}

let ace = Rank.ace
let aceRawValue = ace.rawValue

let rank1 = Rank.six
let rank2 = rank1.rawValue

rank1.compare(.queen)


if let convertedRank = Rank(rawValue: 3) {
    _ = convertedRank.simpleDescription()
}


// Task: Add a color() method to Suit that returns “black” for spades and clubs, and returns “red” for hearts and diamonds.

enum Suit: CaseIterable {

    case spades, hearts, diamonds, clubs

    func simpleDescription() -> String {
        switch self {
        case .spades:
            return "spades"
        case .hearts:
            return "hearts"
        case .diamonds:
            return "diamonds"
        case .clubs:
            return "clubs"
        }
    }
// Soluation:
    func color() -> String {
        switch self {
        case .hearts, .diamonds:
            return "red"
        case .clubs, .spades:
            return "black"
        }
    }
}

let hearts = Suit.hearts
let heartsDescription = hearts.simpleDescription()
hearts.color()


// Task: Add a third case to ServerResponse and to the switch.

enum ServerResponse {
    case result(String, String)
    case failure(String)
    case unknown(String, String, String)
}

let success = ServerResponse.result("6.0 am", "9.0 pm")
let failure = ServerResponse.failure("Out of cheese")

switch success {
case let .result(sunrise, sunset):
    print("Sunrise at \(sunrise), sunset at \(sunset)")

case let .failure(message):
    print("Failure...\(message)")

case let .unknown(this, that, those):
    print("bla \(this), bla \(that), bla \(those)")
}

// Task: Write a function that returns an array containing a full deck of cards, with one card of each combination of rank and suit.

struct Card {
    var rank: Rank
    var suit: Suit
    func simpleDescription() -> String {
        return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
    }

}

var cards = Card(rank: .ace, suit: .clubs)


func fullDeck() -> [Card] {
    var deck: [Card] = []
    for rank in Rank.allCases {
        for suit in Suit.allCases {
            deck.append(Card(rank: rank, suit: suit))
        }

    }
    return deck
}
fullDeck()

// Protocols & Error Handlaing will be added later

// Task: Modify the anyCommonElements(_:_:) function to make a function that returns an array of the elements that any two sequences have in common.

func makeArray<Item>(repeating item: Item, numberIfTime: Int) -> [Item] {
    var result: [Item] = []
    for _ in 0..<numberIfTime {
        result.append(item)
    }
    return result
}

makeArray(repeating: "knock", numberIfTime: 4)

func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> [T.Element]
where T.Element: Equatable, T.Element == U.Element
{
    var result: [T.Element] = []
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
                result.append(lhsItem)
            }
        }
    }
    return result
}

anyCommonElements([1, 2, 3, 4, 5], [4, 7, 3])
// prints 3 and 4
